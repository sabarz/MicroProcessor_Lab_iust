
AVRASM ver. 2.1.30  E:\saba folder\univercity\term 8 4022\Micro Lab\7\7\Debug\List\7.asm Fri Apr 12 23:34:03 2024

E:\saba folder\univercity\term 8 4022\Micro Lab\7\7\Debug\List\7.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\saba folder\univercity\term 8 4022\Micro Lab\7\7\Debug\List\7.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\saba folder\univercity\term 8 4022\Micro Lab\7\7\Debug\List\7.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 4d4c
00002b 3533
00002c 5320
00002d 6e65      	.DB  0x4C,0x4D,0x33,0x35,0x20,0x53,0x65,0x6E
00002e 6f73
00002f 0072
000030 6554
000031 706d      	.DB  0x73,0x6F,0x72,0x0,0x54,0x65,0x6D,0x70
000032 3a20
000033 4300
E:\saba folder\univercity\term 8 4022\Micro Lab\7\7\Debug\List\7.asm(1124): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x20,0x3A,0x0,0x43,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 000c      	.DW  0x0C
000037 0260      	.DW  _0x6
000038 0054      	.DW  _0x0*2
                 
000039 0007      	.DW  0x07
00003a 026c      	.DW  _0x6+12
00003b 0060      	.DW  _0x0*2+12
                 
00003c 0002      	.DW  0x02
00003d 0273      	.DW  _0x6+19
00003e 0067      	.DW  _0x0*2+19
                 
00003f 0002      	.DW  0x02
000040 0275      	.DW  __base_y_G100
000041 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bffb      	OUT  GICR,R31
000048 bfeb      	OUT  GICR,R30
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 00ac 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;// saba razi
                 ;// 99521316
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned char convertIntToChar(int x) {
                 ; 0000 0008 unsigned char convertIntToChar(int x) {
                 
                 	.CSEG
                 _convertIntToChar:
                 ; .FSTART _convertIntToChar
                 ; 0000 0009     return x + '0';
000070 93ba      	ST   -Y,R27
000071 93aa      	ST   -Y,R26
                 ;	x -> Y+0
000072 81e8      	LD   R30,Y
000073 5de0      	SUBI R30,-LOW(48)
000074 c0a2      	RJMP _0x2020002
                 ; 0000 000A }
                 ; .FEND
                 ;
                 ;void displayValueOnLCD(int value, int column) {
                 ; 0000 000C void displayValueOnLCD(int value, int column) {
                 _displayValueOnLCD:
                 ; .FSTART _displayValueOnLCD
                 ; 0000 000D     unsigned int row = 1;
                 ; 0000 000E     unsigned char tens = convertIntToChar(value / 10);
                 ; 0000 000F     unsigned char ones = convertIntToChar(value % 10);
                 ; 0000 0010     lcd_gotoxy(column, row);
000075 93ba      	ST   -Y,R27
000076 93aa      	ST   -Y,R26
000077 940e 02b4 	CALL __SAVELOCR4
                 ;	value -> Y+6
                 ;	column -> Y+4
                 ;	row -> R16,R17
                 ;	tens -> R19
                 ;	ones -> R18
                +
000079 e001     +LDI R16 , LOW ( 1 )
00007a e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
00007b 81ae      	LDD  R26,Y+6
00007c 81bf      	LDD  R27,Y+6+1
00007d e0ea      	LDI  R30,LOW(10)
00007e e0f0      	LDI  R31,HIGH(10)
00007f 940e 0293 	CALL __DIVW21
000081 01df      	MOVW R26,R30
000082 dfed      	RCALL _convertIntToChar
000083 2f3e      	MOV  R19,R30
000084 81ae      	LDD  R26,Y+6
000085 81bf      	LDD  R27,Y+6+1
000086 e0ea      	LDI  R30,LOW(10)
000087 e0f0      	LDI  R31,HIGH(10)
000088 940e 0298 	CALL __MODW21
00008a 01df      	MOVW R26,R30
00008b dfe4      	RCALL _convertIntToChar
00008c 2f2e      	MOV  R18,R30
00008d 81ec      	LDD  R30,Y+4
00008e 93ea      	ST   -Y,R30
00008f 2fa0      	MOV  R26,R16
000090 d07b      	RCALL _lcd_gotoxy
                 ; 0000 0011     lcd_putchar(tens);
000091 2fa3      	MOV  R26,R19
000092 d090      	RCALL _lcd_putchar
                 ; 0000 0012     lcd_gotoxy(column + 1, row);
000093 81ec      	LDD  R30,Y+4
000094 5fef      	SUBI R30,-LOW(1)
000095 93ea      	ST   -Y,R30
000096 2fa0      	MOV  R26,R16
000097 d074      	RCALL _lcd_gotoxy
                 ; 0000 0013     lcd_putchar(ones);
000098 2fa2      	MOV  R26,R18
000099 d089      	RCALL _lcd_putchar
                 ; 0000 0014 }
00009a 940e 02b9 	CALL __LOADLOCR4
00009c 9628      	ADIW R28,8
00009d 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned int readADC(unsigned char adc_input) {
                 ; 0000 0016 unsigned int readADC(unsigned char adc_input) {
                 _readADC:
                 ; .FSTART _readADC
                 ; 0000 0017     ADMUX = adc_input | (1<<REFS0);
00009e 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00009f 81e8      	LD   R30,Y
0000a0 64e0      	ORI  R30,0x40
0000a1 b9e7      	OUT  0x7,R30
                 ; 0000 0018     delay_us(10);
                +
0000a2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000a3 958a     +DEC R24
0000a4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0019     ADCSRA |= (1 << ADSC);
0000a5 9a36      	SBI  0x6,6
                 ; 0000 001A     while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x3:
0000a6 9b34      	SBIS 0x6,4
0000a7 cffe      	RJMP _0x3
                 ; 0000 001B     ADCSRA |= (1 << ADIF);
0000a8 9a34      	SBI  0x6,4
                 ; 0000 001C     return ADCW;
0000a9 b1e4      	IN   R30,0x4
0000aa b1f5      	IN   R31,0x4+1
0000ab c0c6      	RJMP _0x2020001
                 ; 0000 001D }
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 001F void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0020     int temperature;
                 ; 0000 0021 
                 ; 0000 0022     PORTA=0x00;
                 ;	temperature -> R16,R17
0000ac e0e0      	LDI  R30,LOW(0)
0000ad bbeb      	OUT  0x1B,R30
                 ; 0000 0023     DDRA=0x00;
0000ae bbea      	OUT  0x1A,R30
                 ; 0000 0024     PORTB=0x00;
0000af bbe8      	OUT  0x18,R30
                 ; 0000 0025     DDRB=0x00;
0000b0 bbe7      	OUT  0x17,R30
                 ; 0000 0026     PORTC=0x00;
0000b1 bbe5      	OUT  0x15,R30
                 ; 0000 0027     DDRC=0x00;
0000b2 bbe4      	OUT  0x14,R30
                 ; 0000 0028     PORTD=0x00;
0000b3 bbe2      	OUT  0x12,R30
                 ; 0000 0029     DDRD=0x00;
0000b4 bbe1      	OUT  0x11,R30
                 ; 0000 002A 
                 ; 0000 002B     ADMUX |= (1<<MUX0);
0000b5 9a38      	SBI  0x7,0
                 ; 0000 002C     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0000b6 e8e5      	LDI  R30,LOW(133)
0000b7 b9e6      	OUT  0x6,R30
                 ; 0000 002D     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 bfe0      	OUT  0x30,R30
                 ; 0000 002E 
                 ; 0000 002F     lcd_init(16);
0000ba e1a0      	LDI  R26,LOW(16)
0000bb d08d      	RCALL _lcd_init
                 ; 0000 0030 
                 ; 0000 0031     lcd_gotoxy(3, 0);
0000bc e0e3      	LDI  R30,LOW(3)
0000bd 93ea      	ST   -Y,R30
0000be e0a0      	LDI  R26,LOW(0)
0000bf d04c      	RCALL _lcd_gotoxy
                 ; 0000 0032     lcd_puts("LM35 Sensor");
                +
0000c0 e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000c1 e0b2     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000c2 d075      	RCALL _lcd_puts
                 ; 0000 0033 
                 ; 0000 0034     lcd_gotoxy(2, 1);
0000c3 e0e2      	LDI  R30,LOW(2)
0000c4 d0af      	RCALL SUBOPT_0x0
                 ; 0000 0035     lcd_puts("Temp :");
                +
0000c5 e6ac     +LDI R26 , LOW ( _0x6 + ( 12 ) )
0000c6 e0b2     +LDI R27 , HIGH ( _0x6 + ( 12 ) )
                 	__POINTW2MN _0x6,12
0000c7 d070      	RCALL _lcd_puts
                 ; 0000 0036 
                 ; 0000 0037     lcd_gotoxy(12, 1);
0000c8 e0ec      	LDI  R30,LOW(12)
0000c9 d0aa      	RCALL SUBOPT_0x0
                 ; 0000 0038     lcd_putchar(223);
0000ca edaf      	LDI  R26,LOW(223)
0000cb d057      	RCALL _lcd_putchar
                 ; 0000 0039 
                 ; 0000 003A     lcd_gotoxy(13, 1);
0000cc e0ed      	LDI  R30,LOW(13)
0000cd d0a6      	RCALL SUBOPT_0x0
                 ; 0000 003B     lcd_puts("C");
                +
0000ce e7a3     +LDI R26 , LOW ( _0x6 + ( 19 ) )
0000cf e0b2     +LDI R27 , HIGH ( _0x6 + ( 19 ) )
                 	__POINTW2MN _0x6,19
0000d0 d067      	RCALL _lcd_puts
                 ; 0000 003C 
                 ; 0000 003D     while (1) {
                 _0x7:
                 ; 0000 003E         temperature = readADC(0);
0000d1 e0a0      	LDI  R26,LOW(0)
0000d2 dfcb      	RCALL _readADC
0000d3 018f      	MOVW R16,R30
                 ; 0000 003F         temperature = temperature * 0.48898;
0000d4 940e 027b 	CALL __CWD1
0000d6 940e 01f3 	CALL __CDF1
                +
0000d8 e9a6     +LDI R26 , LOW ( 0x3EFA5B96 )
0000d9 e5bb     +LDI R27 , HIGH ( 0x3EFA5B96 )
0000da ef8a     +LDI R24 , BYTE3 ( 0x3EFA5B96 )
0000db e39e     +LDI R25 , BYTE4 ( 0x3EFA5B96 )
                 	__GETD2N 0x3EFA5B96
0000dc 940e 0221 	CALL __MULF12
0000de 940e 01bc 	CALL __CFD1
0000e0 018f      	MOVW R16,R30
                 ; 0000 0040         displayValueOnLCD(temperature, 9);
0000e1 931a      	ST   -Y,R17
0000e2 930a      	ST   -Y,R16
0000e3 e0a9      	LDI  R26,LOW(9)
0000e4 e0b0      	LDI  R27,0
0000e5 df8f      	RCALL _displayValueOnLCD
                 ; 0000 0041         delay_ms(100);
0000e6 e6a4      	LDI  R26,LOW(100)
0000e7 e0b0      	LDI  R27,0
0000e8 940e 0183 	CALL _delay_ms
                 ; 0000 0042     }
0000ea cfe6      	RJMP _0x7
                 ; 0000 0043 }
                 _0xA:
0000eb cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000260           	.BYTE 0x15
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ec 93aa      	ST   -Y,R26
0000ed b3e5      	IN   R30,0x15
0000ee 70ef      	ANDI R30,LOW(0xF)
0000ef 2fae      	MOV  R26,R30
0000f0 81e8      	LD   R30,Y
0000f1 7fe0      	ANDI R30,LOW(0xF0)
0000f2 2bea      	OR   R30,R26
0000f3 bbe5      	OUT  0x15,R30
                +
0000f4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f5 958a     +DEC R24
0000f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f7 9aaa      	SBI  0x15,2
                +
0000f8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f9 958a     +DEC R24
0000fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fb 98aa      	CBI  0x15,2
                +
0000fc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fd 958a     +DEC R24
0000fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ff c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000100 93aa      	ST   -Y,R26
000101 81a8      	LD   R26,Y
000102 dfe9      	RCALL __lcd_write_nibble_G100
000103 81e8          ld    r30,y
000104 95e2          swap  r30
000105 83e8          st    y,r30
000106 81a8      	LD   R26,Y
000107 dfe4      	RCALL __lcd_write_nibble_G100
                +
000108 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000109 958a     +DEC R24
00010a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00010b c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010c 93aa      	ST   -Y,R26
00010d 81e8      	LD   R30,Y
00010e e0f0      	LDI  R31,0
00010f 58eb      	SUBI R30,LOW(-__base_y_G100)
000110 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000111 81e0      	LD   R30,Z
000112 81a9      	LDD  R26,Y+1
000113 0fae      	ADD  R26,R30
000114 dfeb      	RCALL __lcd_write_data
000115 8059      	LDD  R5,Y+1
000116 8048      	LDD  R4,Y+0
                 _0x2020002:
000117 9622      	ADIW R28,2
000118 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000119 e0a2      	LDI  R26,LOW(2)
00011a d05c      	RCALL SUBOPT_0x1
00011b e0ac      	LDI  R26,LOW(12)
00011c dfe3      	RCALL __lcd_write_data
00011d e0a1      	LDI  R26,LOW(1)
00011e d058      	RCALL SUBOPT_0x1
00011f e0e0      	LDI  R30,LOW(0)
000120 2e4e      	MOV  R4,R30
000121 2e5e      	MOV  R5,R30
000122 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000123 93aa      	ST   -Y,R26
000124 81a8      	LD   R26,Y
000125 30aa      	CPI  R26,LOW(0xA)
000126 f011      	BREQ _0x2000005
000127 1457      	CP   R5,R7
000128 f048      	BRLO _0x2000004
                 _0x2000005:
000129 e0e0      	LDI  R30,LOW(0)
00012a 93ea      	ST   -Y,R30
00012b 9443      	INC  R4
00012c 2da4      	MOV  R26,R4
00012d dfde      	RCALL _lcd_gotoxy
00012e 81a8      	LD   R26,Y
00012f 30aa      	CPI  R26,LOW(0xA)
000130 f409      	BRNE _0x2000007
000131 c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000132 9453      	INC  R5
000133 9aa8      	SBI  0x15,0
000134 81a8      	LD   R26,Y
000135 dfca      	RCALL __lcd_write_data
000136 98a8      	CBI  0x15,0
000137 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000138 93ba      	ST   -Y,R27
000139 93aa      	ST   -Y,R26
00013a 931a      	ST   -Y,R17
                 _0x2000008:
00013b 81a9      	LDD  R26,Y+1
00013c 81ba      	LDD  R27,Y+1+1
00013d 91ed      	LD   R30,X+
00013e 83a9      	STD  Y+1,R26
00013f 83ba      	STD  Y+1+1,R27
000140 2f1e      	MOV  R17,R30
000141 30e0      	CPI  R30,0
000142 f019      	BREQ _0x200000A
000143 2fa1      	MOV  R26,R17
000144 dfde      	RCALL _lcd_putchar
000145 cff5      	RJMP _0x2000008
                 _0x200000A:
000146 8118      	LDD  R17,Y+0
000147 9623      	ADIW R28,3
000148 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000149 93aa      	ST   -Y,R26
00014a b3e4      	IN   R30,0x14
00014b 6fe0      	ORI  R30,LOW(0xF0)
00014c bbe4      	OUT  0x14,R30
00014d 9aa2      	SBI  0x14,2
00014e 9aa0      	SBI  0x14,0
00014f 9aa1      	SBI  0x14,1
000150 98aa      	CBI  0x15,2
000151 98a8      	CBI  0x15,0
000152 98a9      	CBI  0x15,1
000153 8078      	LDD  R7,Y+0
000154 81e8      	LD   R30,Y
000155 58e0      	SUBI R30,-LOW(128)
                +
000156 93e0 0277+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000158 81e8      	LD   R30,Y
000159 54e0      	SUBI R30,-LOW(192)
                +
00015a 93e0 0278+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00015c e1a4      	LDI  R26,LOW(20)
00015d e0b0      	LDI  R27,0
00015e 940e 0183 	CALL _delay_ms
000160 d01b      	RCALL SUBOPT_0x2
000161 d01a      	RCALL SUBOPT_0x2
000162 d019      	RCALL SUBOPT_0x2
000163 e2a0      	LDI  R26,LOW(32)
000164 df87      	RCALL __lcd_write_nibble_G100
                +
000165 ec88     +LDI R24 , LOW ( 200 )
000166 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000167 9701     +SBIW R24 , 1
000168 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000169 e2a8      	LDI  R26,LOW(40)
00016a df95      	RCALL __lcd_write_data
00016b e0a4      	LDI  R26,LOW(4)
00016c df93      	RCALL __lcd_write_data
00016d e8a5      	LDI  R26,LOW(133)
00016e df91      	RCALL __lcd_write_data
00016f e0a6      	LDI  R26,LOW(6)
000170 df8f      	RCALL __lcd_write_data
000171 dfa7      	RCALL _lcd_clear
                 _0x2020001:
000172 9621      	ADIW R28,1
000173 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000275           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000174 93ea      	ST   -Y,R30
000175 e0a1      	LDI  R26,LOW(1)
000176 cf95      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000177 df88      	RCALL __lcd_write_data
000178 e0a3      	LDI  R26,LOW(3)
000179 e0b0      	LDI  R27,0
00017a 940c 0183 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00017c e3a0      	LDI  R26,LOW(48)
00017d df6e      	RCALL __lcd_write_nibble_G100
                +
00017e ec88     +LDI R24 , LOW ( 200 )
00017f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000180 9701     +SBIW R24 , 1
000181 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000182 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000183 9610      	adiw r26,0
000184 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000185 ed80     +LDI R24 , LOW ( 0x7D0 )
000186 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000187 9701     +SBIW R24 , 1
000188 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000189 95a8      	wdr
00018a 9711      	sbiw r26,1
00018b f7c9      	brne __delay_ms0
                 __delay_ms1:
00018c 9508      	ret
                 
                 __ROUND_REPACK:
00018d 2355      	TST  R21
00018e f442      	BRPL __REPACK
00018f 3850      	CPI  R21,0x80
000190 f411      	BRNE __ROUND_REPACK0
000191 ffe0      	SBRS R30,0
000192 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000193 9631      	ADIW R30,1
000194 1f69      	ADC  R22,R25
000195 1f79      	ADC  R23,R25
000196 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000197 e850      	LDI  R21,0x80
000198 2757      	EOR  R21,R23
000199 f411      	BRNE __REPACK0
00019a 935f      	PUSH R21
00019b c073      	RJMP __ZERORES
                 __REPACK0:
00019c 3f5f      	CPI  R21,0xFF
00019d f031      	BREQ __REPACK1
00019e 0f66      	LSL  R22
00019f 0c00      	LSL  R0
0001a0 9557      	ROR  R21
0001a1 9567      	ROR  R22
0001a2 2f75      	MOV  R23,R21
0001a3 9508      	RET
                 __REPACK1:
0001a4 935f      	PUSH R21
0001a5 2000      	TST  R0
0001a6 f00a      	BRMI __REPACK2
0001a7 c073      	RJMP __MAXRES
                 __REPACK2:
0001a8 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0001a9 e850      	LDI  R21,0x80
0001aa 2e19      	MOV  R1,R25
0001ab 2215      	AND  R1,R21
0001ac 0f88      	LSL  R24
0001ad 1f99      	ROL  R25
0001ae 2795      	EOR  R25,R21
0001af 0f55      	LSL  R21
0001b0 9587      	ROR  R24
                 
                 __UNPACK1:
0001b1 e850      	LDI  R21,0x80
0001b2 2e07      	MOV  R0,R23
0001b3 2205      	AND  R0,R21
0001b4 0f66      	LSL  R22
0001b5 1f77      	ROL  R23
0001b6 2775      	EOR  R23,R21
0001b7 0f55      	LSL  R21
0001b8 9567      	ROR  R22
0001b9 9508      	RET
                 
                 __CFD1U:
0001ba 9468      	SET
0001bb c001      	RJMP __CFD1U0
                 __CFD1:
0001bc 94e8      	CLT
                 __CFD1U0:
0001bd 935f      	PUSH R21
0001be dff2      	RCALL __UNPACK1
0001bf 3870      	CPI  R23,0x80
0001c0 f018      	BRLO __CFD10
0001c1 3f7f      	CPI  R23,0xFF
0001c2 f408      	BRCC __CFD10
0001c3 c04b      	RJMP __ZERORES
                 __CFD10:
0001c4 e156      	LDI  R21,22
0001c5 1b57      	SUB  R21,R23
0001c6 f4aa      	BRPL __CFD11
0001c7 9551      	NEG  R21
0001c8 3058      	CPI  R21,8
0001c9 f40e      	BRTC __CFD19
0001ca 3059      	CPI  R21,9
                 __CFD19:
0001cb f030      	BRLO __CFD17
0001cc efef      	SER  R30
0001cd efff      	SER  R31
0001ce ef6f      	SER  R22
0001cf e77f      	LDI  R23,0x7F
0001d0 f977      	BLD  R23,7
0001d1 c01a      	RJMP __CFD15
                 __CFD17:
0001d2 2777      	CLR  R23
0001d3 2355      	TST  R21
0001d4 f0b9      	BREQ __CFD15
                 __CFD18:
0001d5 0fee      	LSL  R30
0001d6 1fff      	ROL  R31
0001d7 1f66      	ROL  R22
0001d8 1f77      	ROL  R23
0001d9 955a      	DEC  R21
0001da f7d1      	BRNE __CFD18
0001db c010      	RJMP __CFD15
                 __CFD11:
0001dc 2777      	CLR  R23
                 __CFD12:
0001dd 3058      	CPI  R21,8
0001de f028      	BRLO __CFD13
0001df 2fef      	MOV  R30,R31
0001e0 2ff6      	MOV  R31,R22
0001e1 2f67      	MOV  R22,R23
0001e2 5058      	SUBI R21,8
0001e3 cff9      	RJMP __CFD12
                 __CFD13:
0001e4 2355      	TST  R21
0001e5 f031      	BREQ __CFD15
                 __CFD14:
0001e6 9576      	LSR  R23
0001e7 9567      	ROR  R22
0001e8 95f7      	ROR  R31
0001e9 95e7      	ROR  R30
0001ea 955a      	DEC  R21
0001eb f7d1      	BRNE __CFD14
                 __CFD15:
0001ec 2000      	TST  R0
0001ed f40a      	BRPL __CFD16
0001ee d084      	RCALL __ANEGD1
                 __CFD16:
0001ef 915f      	POP  R21
0001f0 9508      	RET
                 
                 __CDF1U:
0001f1 9468      	SET
0001f2 c001      	RJMP __CDF1U0
                 __CDF1:
0001f3 94e8      	CLT
                 __CDF1U0:
0001f4 9730      	SBIW R30,0
0001f5 4060      	SBCI R22,0
0001f6 4070      	SBCI R23,0
0001f7 f0b1      	BREQ __CDF10
0001f8 2400      	CLR  R0
0001f9 f026      	BRTS __CDF11
0001fa 2377      	TST  R23
0001fb f412      	BRPL __CDF11
0001fc 9400      	COM  R0
0001fd d075      	RCALL __ANEGD1
                 __CDF11:
0001fe 2e17      	MOV  R1,R23
0001ff e17e      	LDI  R23,30
000200 2011      	TST  R1
                 __CDF12:
000201 f032      	BRMI __CDF13
000202 957a      	DEC  R23
000203 0fee      	LSL  R30
000204 1fff      	ROL  R31
000205 1f66      	ROL  R22
000206 1c11      	ROL  R1
000207 cff9      	RJMP __CDF12
                 __CDF13:
000208 2fef      	MOV  R30,R31
000209 2ff6      	MOV  R31,R22
00020a 2d61      	MOV  R22,R1
00020b 935f      	PUSH R21
00020c df8a      	RCALL __REPACK
00020d 915f      	POP  R21
                 __CDF10:
00020e 9508      	RET
                 
                 __ZERORES:
00020f 27ee      	CLR  R30
000210 27ff      	CLR  R31
000211 2766      	CLR  R22
000212 2777      	CLR  R23
000213 915f      	POP  R21
000214 9508      	RET
                 
                 __MINRES:
000215 efef      	SER  R30
000216 efff      	SER  R31
000217 e76f      	LDI  R22,0x7F
000218 ef7f      	SER  R23
000219 915f      	POP  R21
00021a 9508      	RET
                 
                 __MAXRES:
00021b efef      	SER  R30
00021c efff      	SER  R31
00021d e76f      	LDI  R22,0x7F
00021e e77f      	LDI  R23,0x7F
00021f 915f      	POP  R21
000220 9508      	RET
                 
                 __MULF12:
000221 935f      	PUSH R21
000222 df86      	RCALL __UNPACK
000223 3870      	CPI  R23,0x80
000224 f351      	BREQ __ZERORES
000225 3890      	CPI  R25,0x80
000226 f341      	BREQ __ZERORES
000227 2401      	EOR  R0,R1
000228 9408      	SEC
000229 1f79      	ADC  R23,R25
00022a f423      	BRVC __MULF124
00022b f31c      	BRLT __ZERORES
                 __MULF125:
00022c 2000      	TST  R0
00022d f33a      	BRMI __MINRES
00022e cfec      	RJMP __MAXRES
                 __MULF124:
00022f 920f      	PUSH R0
000230 931f      	PUSH R17
000231 932f      	PUSH R18
000232 933f      	PUSH R19
000233 934f      	PUSH R20
000234 2711      	CLR  R17
000235 2722      	CLR  R18
000236 2799      	CLR  R25
000237 9f68      	MUL  R22,R24
000238 01a0      	MOVW R20,R0
000239 9f8f      	MUL  R24,R31
00023a 2d30      	MOV  R19,R0
00023b 0d41      	ADD  R20,R1
00023c 1f59      	ADC  R21,R25
00023d 9f6b      	MUL  R22,R27
00023e 0d30      	ADD  R19,R0
00023f 1d41      	ADC  R20,R1
000240 1f59      	ADC  R21,R25
000241 9f8e      	MUL  R24,R30
000242 d027      	RCALL __MULF126
000243 9fbf      	MUL  R27,R31
000244 d025      	RCALL __MULF126
000245 9f6a      	MUL  R22,R26
000246 d023      	RCALL __MULF126
000247 9fbe      	MUL  R27,R30
000248 d01d      	RCALL __MULF127
000249 9faf      	MUL  R26,R31
00024a d01b      	RCALL __MULF127
00024b 9fae      	MUL  R26,R30
00024c 0d11      	ADD  R17,R1
00024d 1f29      	ADC  R18,R25
00024e 1f39      	ADC  R19,R25
00024f 1f49      	ADC  R20,R25
000250 1f59      	ADC  R21,R25
000251 2fe3      	MOV  R30,R19
000252 2ff4      	MOV  R31,R20
000253 2f65      	MOV  R22,R21
000254 2f52      	MOV  R21,R18
000255 914f      	POP  R20
000256 913f      	POP  R19
000257 912f      	POP  R18
000258 911f      	POP  R17
000259 900f      	POP  R0
00025a 2366      	TST  R22
00025b f02a      	BRMI __MULF122
00025c 0f55      	LSL  R21
00025d 1fee      	ROL  R30
00025e 1fff      	ROL  R31
00025f 1f66      	ROL  R22
000260 c002      	RJMP __MULF123
                 __MULF122:
000261 9573      	INC  R23
000262 f24b      	BRVS __MULF125
                 __MULF123:
000263 df29      	RCALL __ROUND_REPACK
000264 915f      	POP  R21
000265 9508      	RET
                 
                 __MULF127:
000266 0d10      	ADD  R17,R0
000267 1d21      	ADC  R18,R1
000268 1f39      	ADC  R19,R25
000269 c002      	RJMP __MULF128
                 __MULF126:
00026a 0d20      	ADD  R18,R0
00026b 1d31      	ADC  R19,R1
                 __MULF128:
00026c 1f49      	ADC  R20,R25
00026d 1f59      	ADC  R21,R25
00026e 9508      	RET
                 
                 __ANEGW1:
00026f 95f1      	NEG  R31
000270 95e1      	NEG  R30
000271 40f0      	SBCI R31,0
000272 9508      	RET
                 
                 __ANEGD1:
000273 95f0      	COM  R31
000274 9560      	COM  R22
000275 9570      	COM  R23
000276 95e1      	NEG  R30
000277 4fff      	SBCI R31,-1
000278 4f6f      	SBCI R22,-1
000279 4f7f      	SBCI R23,-1
00027a 9508      	RET
                 
                 __CWD1:
00027b 2f6f      	MOV  R22,R31
00027c 0f66      	ADD  R22,R22
00027d 0b66      	SBC  R22,R22
00027e 2f76      	MOV  R23,R22
00027f 9508      	RET
                 
                 __DIVW21U:
000280 2400      	CLR  R0
000281 2411      	CLR  R1
000282 e190      	LDI  R25,16
                 __DIVW21U1:
000283 0faa      	LSL  R26
000284 1fbb      	ROL  R27
000285 1c00      	ROL  R0
000286 1c11      	ROL  R1
000287 1a0e      	SUB  R0,R30
000288 0a1f      	SBC  R1,R31
000289 f418      	BRCC __DIVW21U2
00028a 0e0e      	ADD  R0,R30
00028b 1e1f      	ADC  R1,R31
00028c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00028d 60a1      	SBR  R26,1
                 __DIVW21U3:
00028e 959a      	DEC  R25
00028f f799      	BRNE __DIVW21U1
000290 01fd      	MOVW R30,R26
000291 01d0      	MOVW R26,R0
000292 9508      	RET
                 
                 __DIVW21:
000293 d012      	RCALL __CHKSIGNW
000294 dfeb      	RCALL __DIVW21U
000295 f40e      	BRTC __DIVW211
000296 dfd8      	RCALL __ANEGW1
                 __DIVW211:
000297 9508      	RET
                 
                 __MODW21:
000298 94e8      	CLT
000299 ffb7      	SBRS R27,7
00029a c004      	RJMP __MODW211
00029b 95a0      	COM  R26
00029c 95b0      	COM  R27
00029d 9611      	ADIW R26,1
00029e 9468      	SET
                 __MODW211:
00029f fdf7      	SBRC R31,7
0002a0 dfce      	RCALL __ANEGW1
0002a1 dfde      	RCALL __DIVW21U
0002a2 01fd      	MOVW R30,R26
0002a3 f40e      	BRTC __MODW212
0002a4 dfca      	RCALL __ANEGW1
                 __MODW212:
0002a5 9508      	RET
                 
                 __CHKSIGNW:
0002a6 94e8      	CLT
0002a7 fff7      	SBRS R31,7
0002a8 c002      	RJMP __CHKSW1
0002a9 dfc5      	RCALL __ANEGW1
0002aa 9468      	SET
                 __CHKSW1:
0002ab ffb7      	SBRS R27,7
0002ac c006      	RJMP __CHKSW2
0002ad 95a0      	COM  R26
0002ae 95b0      	COM  R27
0002af 9611      	ADIW R26,1
0002b0 f800      	BLD  R0,0
0002b1 9403      	INC  R0
0002b2 fa00      	BST  R0,0
                 __CHKSW2:
0002b3 9508      	RET
                 
                 __SAVELOCR4:
0002b4 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002b5 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002b6 931a      	ST   -Y,R17
0002b7 930a      	ST   -Y,R16
0002b8 9508      	RET
                 
                 __LOADLOCR4:
0002b9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002ba 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002bb 8119      	LDD  R17,Y+1
0002bc 8108      	LD   R16,Y
0002bd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  28 r1 :  17 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  13 r18:  11 r19:  12 r20:   8 r21:  44 r22:  33 r23:  30 
r24:  29 r25:  25 r26:  71 r27:  25 r28:   5 r29:   1 r30: 106 r31:  33 
x  :   4 y  :  56 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   8 
adiw  :   8 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  10 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   1 brmi  :   4 brne  :  18 brpl  :   4 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  10 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   1 cpc   :   0 cpi   :  12 cpse  :   0 dec   :  10 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  23 ld    :  15 ldd   :  16 ldi   :  81 
lds   :   0 lpm   :   7 lsl   :  10 lsr   :   1 mov   :  29 movw  :  11 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  19 pop   :  11 push  :  10 rcall :  55 ret   :  25 
reti  :   0 rjmp  :  30 rol   :  14 ror   :   7 sbc   :   2 sbci  :   7 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :   2 sub   :   2 subi  :   6 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 70 out of 116 (60.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00057c   1354     50   1404   32768   4.3%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
