;// Saba Razi
;// 99521316
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;unsigned char Lines = 72;
;const unsigned char image_code[Lines] = {
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;
;    0xFF,    //    0007        # # # # # # # #
;    0xF6,    //    0001        # # # # . # # .
;    0xF6,    //    0002        # # # # . # # .
;    0xF6,    //    0003        # # # # . # # .
;    0xF6,    //    0004        # # # # . # # .
;    0x80,    //    0005        # . . . . . . .
;    0xFF,    //    0006        # # # # # # # #
;
;    0xFF,    //    0007        # # # # # # # #
;    0xB6,    //    0008        # . # # . # # .
;    0xB6,    //    0009        # . # # . # # .
;    0xB6,    //    000A        # . # # . # # .
;    0xB6,    //    000B        # . # # . # # .
;    0x80,    //    000C        # . . . . . . .
;    0xFF,    //    000D        # # # # # # # #
;
;    0xFF,    //    000E        # # # # # # # #
;    0xE3,    //    000F        # # # . . . # #
;    0xDD,    //    0010        # # . # # # . #
;    0xBE,    //    0011        # . # # # # # .
;    0x80,    //    0012        # . . . . . . .
;    0xFF,    //    0013        # # # # # # # #
;
;    0xFF,    //    0014        # # # # # # # #
;    0xBE,    //    0015        # . # # # # # .
;    0xBE,    //    0016        # . # # # # # .
;    0xBE,    //    0017        # . # # # # # .
;    0xBE,    //    0018        # . # # # # # .
;    0xC1,    //    0019        # # . . . . . #
;    0xFF,    //    001A        # # # # # # # #
;
;    0xFF,    //    001B        # # # # # # # #
;    0xC9,    //    001C        # # . . # . . #
;    0xB6,    //    001D        # . # # . # # .
;    0xBE,    //    001E        # . # # # # # .
;    0x80,    //    001F        # . . . . . . .
;    0xFF,    //    0020        # # # # # # # #
;
;    0xFF,    //    0021        # # # # # # # #
;    0x9F,    //    0022        # . . # # # # #
;    0xE7,    //    0023        # # # . . # # #
;    0xE9,    //    0024        # # # . # . . #
;    0xEE,    //    0025        # # # . # # # .
;    0xE9,    //    0026        # # # . # . . #
;    0xE7,    //    0027        # # # . . # # #
;    0x9F,    //    0028        # . . # # # # #
;    0xFF,    //    0029        # # # # # # # #
;
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //    0029        # # # # # # # #
;    0xFF,    //	0029		# # # # # # # #
;	0xFF,	//	0029		# # # # # # # #
;	0xFF,	//	0029		# # # # # # # #
;};
;
;
;
;void main(void) {
; 0000 005D void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 005E     unsigned char hold, Col, Refresh, Index, S;
; 0000 005F     unsigned char first = 8;
; 0000 0060 
; 0000 0061     DDRC = 0xFF;
;	hold -> R17
;	Col -> R16
;	Refresh -> R19
;	Index -> R18
;	S -> R21
;	first -> R20
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0062     PORTC = 0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0063     DDRD = 0xFF;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0064     PORTD = 0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0065     DDRB = 0xFF;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0066     PORTB = 0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0067 
; 0000 0068     while (1) {
;PCODE: $0000001C VOL: 0
; 0000 0069         for (S = first; S < Lines - first + 1; S++) {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006A             for (Refresh = 0; Refresh < 4; Refresh++) {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006B                 hold = 0b00000001;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 006C                 for (Col = 0; Col < 8; Col++) {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006D                     Index = S - Col;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006E 
; 0000 006F                     PORTD = hold;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0070                     PORTC = image_code[Index + 8];
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0071                     delay_ms(2);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0072                     PORTD = 0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0073 
; 0000 0074                     PORTB = hold;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0075                     PORTC = image_code[Index];
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0076                     delay_ms(2);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0077                     PORTB = 0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0078 
; 0000 0079                     hold = hold << 1;
;PCODE: $0000005E VOL: 0
; 0000 007A                 }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 007B             }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007C         }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007D     };
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007E }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
